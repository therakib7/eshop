> Current user id
> Curent user role_id
> role permission permission_id
> permission perission slug by ids
> checking from list slug
> All query save in redis memory

get all permission id in one query 

Repo.all(from m in Eshop.Users.UserRole, join: c in Eshop.Users.RolePermission, on: m.role_id == c.role_id, where: m.user_id == 4, select: c.permission_id)

Repo.all(from m in Eshop.Users.UserRole, join: c in Eshop.Users.RolePermission, on: m.role_id == c.role_id, where: m.user_id == 4, select: %{id: c.permission_id}) 

#IO.inspect(per_ids)
IO.puts "Variable a is true!"

# all search arguments
# has one, has_many and belongs to data
# Pagination data
# Role permission

* All Routers   
* Seed data (Role and Permission and others)
* Gurdian Authentication Api and graphql 
* Mix test fixing later

now() for postbird datetime auto insert

schema "users" do
  has_one :profile, Eshop.Users.UserProfile
end

schema "user_profiles" do
    belongs_to :company, Eshop.Companies.Company
    belongs_to :shop, Eshop.Companies.Shop
    belongs_to :user, Eshop.Users.User
    belongs_to :shop, Eshop.Companies.Shop
    belongs_to :pre_location, Eshop.Geo.Location
    belongs_to :per_location, Eshop.Geo.Location
    belongs_to :invoice, Eshop.Orders.Invoice
    belongs_to :attachment, Eshop.Attachments.Attachment
end

schema "invoices" do
  has_many :invoice_items, Eshop.Orders.InvoiceItem
end




mutation {
  updateRole(id: 2, roleParams: { name: "update value"} ) {
    name
  }
  
}



changeset
=========
    |> cast(attrs, [:fieldName, :fieldName2,])
    |> validate_required([:fieldName, :fieldName2])
    |> validate_confirmation(:password)
    |> validate_format(:email, ~r/@/)
    |> unique_constraint(:email)
    |> validate_length(:password, min: 8, max: 80)
    |> validate_length(:pin, min: 4, max: 10)
    |> put_password_hash()
    |> validate_inclusion(:age, 1..18)
    |> unique_constraint(:slug)
    |> validate_number(:lat, greater_than_or_equal_to: -90, less_than_or_equal_to: 90)




Features list
===================
Product / per item 
Service / per item
Ecommerce and Local
Local Only
Warehousse
Shop
Pacakge
Service
Live chat
Customer Notification
Mobile App (Android, IOS)
Web App
Supplier management
Customer management
Ecommerce integration
Blog App
Hosting
Domain
Support
Multi Vendor Features

Book
> Category
> Brand
> Product
> Service



# Note

১। সেসন টকেন ডিলিট করার সময় টকেন এর আইডি ব্যবহার করতে হবে।
২। ইউজার লগইন করলে ইউজার লোকেশান আইপি ইত্যাদি ইনফর্মেশন টেবিল আ সেভ করতে হবে।
৩। ইউজার সেশন ডিলিট হলে যাতে লগইন ইনফর্মেশন টেবিল এর ডাটা ডিলিট নয়া হই।